No 1
procedure copyStack(input sIn: Stack, output sOut: Stack)
{ Membuat salinan sOut }
{ I.S. sIn terdefinisi, sOut sembarang }
{ F.S. sOut berisi salinan sIn yang identik }
Kamus Lokal
val: ElType
sTemp: Stack
Algoritma
    CreateStack(STemp)
    CreateStack(sOut)
    while sIn.idxTop != IDX_UNDEF do
        pop(sIn,val)
        push(sTemp,val)
    while sTemp.idxTop != IDX_UNDEF do
        pop(sTemp,val)
        push(sIn,val)
        push(sOut,val)

procedure inverseStack(input/output s: Stack)
{ Membalik isi suatu stack }
{ I.S. s terdefinisi }
{ F.S. Isi s terbalik dari posisi semula }
Kamus Lokal
val: ElType
sTemp: Stack
Algoritma
    CreateStack(sTemp)
    while not isEmpty(s) do
        pop(sIn,val)
        push(sTemp,val)
    copyStack(sTemp,s)

function mergeStack(s1,s2: Stack) → Stack
{ Menghasilkan sebuah stack yang merupakan hasil penggabungan s1
dengan s2 dengan s1 berada di posisi lebih “bawah”. Urutan kedua
stack harus sama seperti aslinya. }
{ Stack baru diisi sampai seluruh elemen s1 dan s2 masuk ke dalam
stack, atau jika stack baru sudah penuh, maka elemen yang
dimasukkan adalah secukupnya yang dapat ditampung. }
Kamus Lokal
val: ElType
Algoritma
    CreateStack(sOut)
    CreateStack(s2t)
    copyStack(s1,r)
    copyStack(s2,s2t)
    inverseStack(s2t)
    while not isEmpty(s2t) and not isFull(sOut) do
        pop(s2t,val)
        push(sOut,val)

No2

Program EKSPRESI
{ Menghitung sebuah ekspresi aritmatika yang ditulis secara postfix }
USE STACK { paket stack sudah terdefinisi dgn elemennya bertipe token }

KAMUS
type Token: ... { terdefinisi }
s: Stack { stack of token }
currentToken, op1, op2: Token { token: operan ∪ operator }

ALGORITMA
    firstToken
    if (endToken) then
        output ("Ekspresi kosong")
    else
    repeat
        if not isOperator then
            push(s,currentToken)
        else
            pop(s,op2)
            pop(s,op1)
            push(s,evaluate(op1,op2, currentToken))
        nextToken
    until (endToken)
    output (top(s)) { Menuliskan hasil }